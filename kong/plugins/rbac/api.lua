---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dyson.
--- DateTime: 2018/4/3 下午5:13
---

local crud = require "kong.api.crud_helpers"
local utils = require "kong.tools.utils"

return {
  ["/rbac/resources"] = {
    before = function(self, dao_factory, helpers)
     --crud.find_consumer_by_username_or_id(self, dao_factory, helpers)
     --self.params.consumer_id = self.consumer.id
    end,

    GET = function(self, dao_factory)
      crud.paginated_set(self, dao_factory.rbac_resources)
    end,

    PUT = function(self, dao_factory)
      crud.put(self.params, dao_factory.rbac_resources)
    end,

    POST = function(self, dao_factory)
      -- dao_factory.rbac_resources:update(self.params)
      crud.post(self.params, dao_factory.rbac_resources)
    end,

    DELETE = function(self, dao_factory, helpers)
      local filter = {}
      filter['resource_id'] = self.params.id
      local list, err = dao_factory.rbac_role_resources:find_all(filter)
      if err then
        return helpers.yield_error(err)
      elseif next(list) ~= nil then
        for i=1, #list do
          local filter = {}
          filter['id'] = list[i].id
          dao_factory.rbac_role_resources:delete(filter)
        end
      end

      crud.delete(self.params, dao_factory.rbac_resources)
    end
  },

  ["/rbac/roles"] = {
    before = function(self, dao_factory, helpers)
      --crud.find_consumer_by_username_or_id(self, dao_factory, helpers)
      --self.params.consumer_id = self.consumer.id
    end,

    GET = function(self, dao_factory)
      crud.paginated_set(self, dao_factory.rbac_roles)
    end,

    PUT = function(self, dao_factory)
      crud.put(self.params, dao_factory.rbac_roles)
    end,

    POST = function(self, dao_factory)
      crud.post(self.params, dao_factory.rbac_roles)
    end,

    DELETE = function(self, dao_factory)
      local filter = {}
      filter['role_id'] = self.params.id
      local role_resources, err = dao_factory.rbac_role_resources:find_all(filter)
      if err then
        return helpers.yield_error(err)
      elseif table.getn(role_resources) > 0 then
        for i = 1, #role_resources do
          dao_factory.rbac_role_resources:delete(role_resources[i])
        end
      end

      crud.delete(self.params, dao_factory.rbac_roles)
    end
  },

  ["/rbac/roles/:role_name_or_id"] = {
    before = function(self, dao_factory, helpers)
      local role_list, err = crud.find_by_id_or_field(
        dao_factory.rbac_roles,
        {},
        self.params.role_name_or_id,
        "name"
      )

      self.role_info = {}
      if not err or next(role_list) ~= nil then
        self.params.role_name_or_id = nil
        self.role_info = role_list[1]
      end
    end,

    GET = function(self, dao_factory, helpers)
      if self.role_info then
        return helpers.responses.send_HTTP_OK(self.role_info)
      end
      return helpers.responses.send_HTTP_NOT_FOUND("no found")
    end
  },

  ["/rbac/roles/:role_name_or_id/resources"] = {
    before = function(self, dao_factory, helpers)
      local roles, err = crud.find_by_id_or_field(
        dao_factory.rbac_roles,
        {},
        self.params.role_name_or_id,
        "name"
      )

      if err then
        return helpers.yield_error(err)
      elseif next(roles) == nil then
        return helpers.responses.send_HTTP_NOT_FOUND()
      end

      self.params.role_name_or_id = nil
      self.params.role_id = roles[1].id
      self.role = roles[1]
    end,

    GET = function(self, dao_factory, helpers)
      local role_ids = {}

      if self.params.role_ids then
          role_ids = utils.split(self.params.role_ids, ",")
      end

      if self.params.role_id then
        table.insert(role_ids, self.params.role_id)
      end

      if table.getn(role_ids) > 0 then
        local dataList = {}
        for i = 1, #role_ids do
          local filter = {}
          filter['role_id'] = role_ids[i]
          local resource, err = dao_factory.rbac_role_resources:find_all(filter)
          if err then
            return helpers.yield_error(err)
          elseif next(resource) ~= nil then
            for m = 1, #resource do
              table.insert(dataList, resource[m])
            end
          end
        end
        return helpers.responses.send_HTTP_OK { total = table.getn(dataList), data = dataList }
      end

      return helpers.responses.send_HTTP_NOT_FOUND("No resources found.")
    end,

    POST = function(self, dao_factory, helpers)
      if not self.params.role_id then
        return helpers.responses.send_HTTP_NOT_FOUND("not found.")
      end

      local filter = {}
      filter['role_id'] = self.params.role_id
      local list, err = dao_factory.rbac_role_resources:find_all(filter)
      if err then
        return helpers.yield_error(err)
      end

      if next(list) ~= nil then
        for i = 1, #list do
          dao_factory.rbac_role_resources:delete(list[i])
        end 
      end

      local resource_ids = utils.split(self.params.resource_id, ",")
      self.params.resource_id = nil

      if table.getn(resource_ids) ~= nil then
        for i = 1, #resource_ids do
          self.params.resource_id = resource_ids[i]
          dao_factory.rbac_role_resources:insert(self.params)
        end
        return helpers.responses.send_HTTP_OK("set resource by role ok~")
      end
      return helpers.responses.send_HTTP_NOT_FOUND("set resource by role fail.")
    end,

    DELETE = function(self, dao_factory, helpers)
      local role_resources = dao_factory.rbac_role_resources:find_all(self.params)
      if table.getn(role_resources) <= 0 then
        return helpers.responses.send_HTTP_NOT_FOUND("No resources found.")
      end
      for i = 1, #role_resources do
        crud.delete(role_resources[i], dao_factory.rbac_role_resources)
      end
    end
  },

  ["/rbac/role/:role_name_or_id/consumers"] = {
    before = function(self, dao_factory, helpers)
      local roles, err = crud.find_by_id_or_field(
        dao_factory.rbac_roles,
        {},
        self.params.role_name_or_id,
        "name"
      )

      if err then
        return helpers.yield_error(err)
      elseif next(roles) == nil then
        return helpers.responses.send_HTTP_NOT_FOUND()
      end

      self.params.role_name_or_id = nil
      self.params.role_id = roles[1].id
      self.role = roles[1]
    end,

    GET = function(self, dao_factory)
      crud.paginated_set(self, dao_factory.rbac_role_consumers)
    end,

    POST = function(self, dao_factory)
      crud.post(self.params, dao_factory.rbac_role_consumers)
    end,

    DELETE = function(self, dao_factory, helpers)
      local role_consumers = dao_factory.rbac_role_consumers:find_all(self.params)
      --local primary_keys = {}
      if table.getn(role_consumers) <= 0 then
        return helpers.responses.send_HTTP_NOT_FOUND("No consumers found.")
      end

      for i = 1, #role_consumers do
        crud.delete(role_consumers[i], dao_factory.rbac_role_consumers)
      end
    end
  },

  ["/rbac/consumers/:consumer_id/role"] = {
    before = function(self, dao_factory, helpers)
      local filter = {}
      filter['consumer_id'] = self.params.consumer_id
      local roles, err = dao_factory.rbac_role_consumers:find_all(filter)

      if err then
        return helpers.responses.send_HTTP_BAD_REQUEST(err.message)
      end
      
      self.roles = roles
    end,

    GET = function(self, dao_factory, helpers)
      return helpers.responses.send_HTTP_OK { total = table.getn(self.roles),  data = self.roles }
    end,

    POST = function(self, dao_factory, helpers)
      -- delete user all roles 
      if next(self.roles) ~= nil then
        for i = 1, #self.roles do
          dao_factory.rbac_role_consumers:delete(self.roles[i])
        end
      end
      
      -- reset post role ids
      local role_ids = utils.split(self.params.role_id, ",")
      self.params.role_id = nil

      if role_ids and table.getn(role_ids) > 0 then
          for i = 1, #role_ids do
            self.params.role_id = role_ids[i]
            dao_factory.rbac_role_consumers:insert(self.params)
          end

          return helpers.responses.send_HTTP_OK("set role ok")
      end
      
      return helpers.responses.send_HTTP_NOT_FOUND("set role fail.")
    end,

    DELETE = function(self, dao_factory, helpers)
      if table.getn(self.roles) > 0 then
        for i=1, #self.roles do
          dao_factory.rbac_role_consumers:delete(self.roles[i])
        end
      end

      return helpers.responses.send_HTTP_OK("delete ok")
    end
  },

  ["/consumers/:username_or_id/rbac-credentials/"] = {
    before = function(self, dao_factory, helpers)
      crud.find_consumer_by_username_or_id(self, dao_factory, helpers)
      self.params.consumer_id = self.consumer.id
    end,

    GET = function(self, dao_factory)
      crud.paginated_set(self, dao_factory.rbac_credentials)
    end,

    PUT = function(self, dao_factory)
      crud.put(self.params, dao_factory.rbac_credentials)
    end,

    POST = function(self, dao_factory)
      crud.post(self.params, dao_factory.rbac_credentials)
    end,

    DELETE = function(self, dao_factory)
      crud.delete(self.params, dao_factory.rbac_credentials)
    end
  },

  ["/rbac/credentials"] = {
    GET = function(self, dao_factory)
      crud.paginated_set(self, dao_factory.rbac_credentials)
    end,

    POST = function(self, dao_factory, helpers)
      if not self.params.consumer_id then
        if self.params.custom_id or self.params.username then
          local filter = {}
          filter[self.params.custom_id and 'custom_id' or 'username'] = self.params.custom_id and self.params.custom_id or self.params.username
          local consumer
          local consumers, err = dao_factory.consumers:find_all(filter)
          if err then
            return helpers.responses.send_HTTP_BAD_REQUEST(err.message)
          elseif next(consumers) == nil then
            consumer = dao_factory.consumers:insert({ custom_id = self.params.custom_id, username = self.params.username })
          else
            consumer = consumers[1]
          end
          self.params.consumer_id = consumer.id
        end
      end
      self.params.username = nil
      self.params.custom_id = nil
      crud.post(self.params, dao_factory.rbac_credentials)
    end
  },

  ["/rbac/credentials/:credential_key_or_id"] = {
    before = function(self, dao_factory, helpers)
      local credentials, err = crud.find_by_id_or_field(
        dao_factory.rbac_credentials,
        {},
        self.params.credential_key_or_id,
        "key"
      )

      if err then
        return helpers.yield_error(err)
      elseif next(credentials) == nil then
        return helpers.responses.send_HTTP_NOT_FOUND('No credentials found.')
      end

      self.params.credential_key_or_id = nil
      self.params.id = credentials[1].id
      self.credential = credentials[1]
    end,

    GET = function(self, dao_factory, helpers)
      return helpers.responses.send_HTTP_OK(self.credential)
    end,

    DELETE = function(self, dao_factory)
      crud.delete(self.credential, dao_factory.rbac_credentials)
    end
  },

  ["/rbac/credentials/:credential_key_or_id/consumer"] = {
    before = function(self, dao_factory, helpers)
      local credentials, err = crud.find_by_id_or_field(
        dao_factory.rbac_credentials,
        {},
        self.params.credential_key_or_id,
        "key"
      )

      if err then
        return helpers.yield_error(err)
      elseif next(credentials) == nil then
        return helpers.responses.send_HTTP_NOT_FOUND('No credentials found.')
      end

      self.params.credential_key_or_id = nil
      self.params.username_or_id = credentials[1].consumer_id
      crud.find_consumer_by_username_or_id(self, dao_factory, helpers)
    end,

    GET = function(self, dao_factory, helpers)
      return helpers.responses.send_HTTP_OK(self.consumer)
    end
  }
}